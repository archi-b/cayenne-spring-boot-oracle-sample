package com.archib.cayenne.spring.oracle.example.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Dispositivos was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Dispositivos extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String MODELO_PK_COLUMN = "MODELO";
    public static final String PLATAFORMA_PK_COLUMN = "PLATAFORMA";
    public static final String PLATAFORMA_VERSAO_PK_COLUMN = "PLATAFORMA_VERSAO";
    public static final String UUID_PK_COLUMN = "UUID";

    public static final Property<String> APP_VERSAO = Property.create("appVersao", String.class);
    public static final Property<Timestamp> DATA_CRIACAO = Property.create("dataCriacao", Timestamp.class);
    public static final Property<Timestamp> DATA_MODIFICACAO = Property.create("dataModificacao", Timestamp.class);
    public static final Property<Timestamp> DATA_ULTIMO_ACESSO = Property.create("dataUltimoAcesso", Timestamp.class);
    public static final Property<String> HASH_PUSH = Property.create("hashPush", String.class);
    public static final Property<Boolean> LOGOUT = Property.create("logout", Boolean.class);

    protected String appVersao;
    protected Timestamp dataCriacao;
    protected Timestamp dataModificacao;
    protected Timestamp dataUltimoAcesso;
    protected String hashPush;
    protected boolean logout;


    public void setAppVersao(String appVersao) {
        beforePropertyWrite("appVersao", this.appVersao, appVersao);
        this.appVersao = appVersao;
    }

    public String getAppVersao() {
        beforePropertyRead("appVersao");
        return this.appVersao;
    }

    public void setDataCriacao(Timestamp dataCriacao) {
        beforePropertyWrite("dataCriacao", this.dataCriacao, dataCriacao);
        this.dataCriacao = dataCriacao;
    }

    public Timestamp getDataCriacao() {
        beforePropertyRead("dataCriacao");
        return this.dataCriacao;
    }

    public void setDataModificacao(Timestamp dataModificacao) {
        beforePropertyWrite("dataModificacao", this.dataModificacao, dataModificacao);
        this.dataModificacao = dataModificacao;
    }

    public Timestamp getDataModificacao() {
        beforePropertyRead("dataModificacao");
        return this.dataModificacao;
    }

    public void setDataUltimoAcesso(Timestamp dataUltimoAcesso) {
        beforePropertyWrite("dataUltimoAcesso", this.dataUltimoAcesso, dataUltimoAcesso);
        this.dataUltimoAcesso = dataUltimoAcesso;
    }

    public Timestamp getDataUltimoAcesso() {
        beforePropertyRead("dataUltimoAcesso");
        return this.dataUltimoAcesso;
    }

    public void setHashPush(String hashPush) {
        beforePropertyWrite("hashPush", this.hashPush, hashPush);
        this.hashPush = hashPush;
    }

    public String getHashPush() {
        beforePropertyRead("hashPush");
        return this.hashPush;
    }

    public void setLogout(boolean logout) {
        beforePropertyWrite("logout", this.logout, logout);
        this.logout = logout;
    }

	public boolean isLogout() {
        beforePropertyRead("logout");
        return this.logout;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "appVersao":
                return this.appVersao;
            case "dataCriacao":
                return this.dataCriacao;
            case "dataModificacao":
                return this.dataModificacao;
            case "dataUltimoAcesso":
                return this.dataUltimoAcesso;
            case "hashPush":
                return this.hashPush;
            case "logout":
                return this.logout;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "appVersao":
                this.appVersao = (String)val;
                break;
            case "dataCriacao":
                this.dataCriacao = (Timestamp)val;
                break;
            case "dataModificacao":
                this.dataModificacao = (Timestamp)val;
                break;
            case "dataUltimoAcesso":
                this.dataUltimoAcesso = (Timestamp)val;
                break;
            case "hashPush":
                this.hashPush = (String)val;
                break;
            case "logout":
                this.logout = val == null ? false : (boolean)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.appVersao);
        out.writeObject(this.dataCriacao);
        out.writeObject(this.dataModificacao);
        out.writeObject(this.dataUltimoAcesso);
        out.writeObject(this.hashPush);
        out.writeBoolean(this.logout);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.appVersao = (String)in.readObject();
        this.dataCriacao = (Timestamp)in.readObject();
        this.dataModificacao = (Timestamp)in.readObject();
        this.dataUltimoAcesso = (Timestamp)in.readObject();
        this.hashPush = (String)in.readObject();
        this.logout = in.readBoolean();
    }

}
