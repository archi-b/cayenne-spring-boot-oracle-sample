package com.archib.cayenne.spring.oracle.example.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _CodigoVerificacao was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CodigoVerificacao extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_COD_VERIF_PK_COLUMN = "ID_COD_VERIF";

    public static final Property<BigDecimal> CODIGO = Property.create("codigo", BigDecimal.class);
    public static final Property<Timestamp> DATA_EXPIRACAO = Property.create("dataExpiracao", Timestamp.class);
    public static final Property<String> TIPO_CODIGO = Property.create("tipoCodigo", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);

    protected BigDecimal codigo;
    protected Timestamp dataExpiracao;
    protected String tipoCodigo;
    protected String username;


    public void setCodigo(BigDecimal codigo) {
        beforePropertyWrite("codigo", this.codigo, codigo);
        this.codigo = codigo;
    }

    public BigDecimal getCodigo() {
        beforePropertyRead("codigo");
        return this.codigo;
    }

    public void setDataExpiracao(Timestamp dataExpiracao) {
        beforePropertyWrite("dataExpiracao", this.dataExpiracao, dataExpiracao);
        this.dataExpiracao = dataExpiracao;
    }

    public Timestamp getDataExpiracao() {
        beforePropertyRead("dataExpiracao");
        return this.dataExpiracao;
    }

    public void setTipoCodigo(String tipoCodigo) {
        beforePropertyWrite("tipoCodigo", this.tipoCodigo, tipoCodigo);
        this.tipoCodigo = tipoCodigo;
    }

    public String getTipoCodigo() {
        beforePropertyRead("tipoCodigo");
        return this.tipoCodigo;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "codigo":
                return this.codigo;
            case "dataExpiracao":
                return this.dataExpiracao;
            case "tipoCodigo":
                return this.tipoCodigo;
            case "username":
                return this.username;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "codigo":
                this.codigo = (BigDecimal)val;
                break;
            case "dataExpiracao":
                this.dataExpiracao = (Timestamp)val;
                break;
            case "tipoCodigo":
                this.tipoCodigo = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.codigo);
        out.writeObject(this.dataExpiracao);
        out.writeObject(this.tipoCodigo);
        out.writeObject(this.username);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.codigo = (BigDecimal)in.readObject();
        this.dataExpiracao = (Timestamp)in.readObject();
        this.tipoCodigo = (String)in.readObject();
        this.username = (String)in.readObject();
    }

}
