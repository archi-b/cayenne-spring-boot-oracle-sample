package com.archib.cayenne.spring.oracle.example.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _PrefUsuario was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PrefUsuario extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String USERNAME_PK_COLUMN = "USERNAME";

    public static final Property<Timestamp> DATA_ACEITACAO_TERMO = Property.create("dataAceitacaoTermo", Timestamp.class);
    public static final Property<Timestamp> DATA_CRIACAO = Property.create("dataCriacao", Timestamp.class);
    public static final Property<Timestamp> DATA_MODIFICACAO = Property.create("dataModificacao", Timestamp.class);
    public static final Property<Timestamp> DATA_REJEICAO_TERMO = Property.create("dataRejeicaoTermo", Timestamp.class);
    public static final Property<Boolean> PUSH_NOTIFICATION = Property.create("pushNotification", Boolean.class);
    public static final Property<Boolean> EMAIL_VERIFICADO = Property.create("emailVerificado", Boolean.class);

    protected Timestamp dataAceitacaoTermo;
    protected Timestamp dataCriacao;
    protected Timestamp dataModificacao;
    protected Timestamp dataRejeicaoTermo;
    protected boolean pushNotification;
    protected boolean emailVerificado;


    public void setDataAceitacaoTermo(Timestamp dataAceitacaoTermo) {
        beforePropertyWrite("dataAceitacaoTermo", this.dataAceitacaoTermo, dataAceitacaoTermo);
        this.dataAceitacaoTermo = dataAceitacaoTermo;
    }

    public Timestamp getDataAceitacaoTermo() {
        beforePropertyRead("dataAceitacaoTermo");
        return this.dataAceitacaoTermo;
    }

    public void setDataCriacao(Timestamp dataCriacao) {
        beforePropertyWrite("dataCriacao", this.dataCriacao, dataCriacao);
        this.dataCriacao = dataCriacao;
    }

    public Timestamp getDataCriacao() {
        beforePropertyRead("dataCriacao");
        return this.dataCriacao;
    }

    public void setDataModificacao(Timestamp dataModificacao) {
        beforePropertyWrite("dataModificacao", this.dataModificacao, dataModificacao);
        this.dataModificacao = dataModificacao;
    }

    public Timestamp getDataModificacao() {
        beforePropertyRead("dataModificacao");
        return this.dataModificacao;
    }

    public void setDataRejeicaoTermo(Timestamp dataRejeicaoTermo) {
        beforePropertyWrite("dataRejeicaoTermo", this.dataRejeicaoTermo, dataRejeicaoTermo);
        this.dataRejeicaoTermo = dataRejeicaoTermo;
    }

    public Timestamp getDataRejeicaoTermo() {
        beforePropertyRead("dataRejeicaoTermo");
        return this.dataRejeicaoTermo;
    }

    public void setPushNotification(boolean pushNotification) {
        beforePropertyWrite("pushNotification", this.pushNotification, pushNotification);
        this.pushNotification = pushNotification;
    }

	public boolean isPushNotification() {
        beforePropertyRead("pushNotification");
        return this.pushNotification;
    }

    public void setEmailVerificado(boolean emailVerificado) {
        beforePropertyWrite("emailVerificado", this.emailVerificado, emailVerificado);
        this.emailVerificado = emailVerificado;
    }

	public boolean isEmailVerificado() {
        beforePropertyRead("emailVerificado");
        return this.emailVerificado;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dataAceitacaoTermo":
                return this.dataAceitacaoTermo;
            case "dataCriacao":
                return this.dataCriacao;
            case "dataModificacao":
                return this.dataModificacao;
            case "dataRejeicaoTermo":
                return this.dataRejeicaoTermo;
            case "pushNotification":
                return this.pushNotification;
            case "emailVerificado":
                return this.emailVerificado;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dataAceitacaoTermo":
                this.dataAceitacaoTermo = (Timestamp)val;
                break;
            case "dataCriacao":
                this.dataCriacao = (Timestamp)val;
                break;
            case "dataModificacao":
                this.dataModificacao = (Timestamp)val;
                break;
            case "dataRejeicaoTermo":
                this.dataRejeicaoTermo = (Timestamp)val;
                break;
            case "pushNotification":
                this.pushNotification = val == null ? false : (boolean)val;
                break;
            case "emailVerificado":
                this.emailVerificado = val == null ? false : (boolean)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dataAceitacaoTermo);
        out.writeObject(this.dataCriacao);
        out.writeObject(this.dataModificacao);
        out.writeObject(this.dataRejeicaoTermo);
        out.writeBoolean(this.pushNotification);
        out.writeBoolean(this.emailVerificado);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dataAceitacaoTermo = (Timestamp)in.readObject();
        this.dataCriacao = (Timestamp)in.readObject();
        this.dataModificacao = (Timestamp)in.readObject();
        this.dataRejeicaoTermo = (Timestamp)in.readObject();
        this.pushNotification = in.readBoolean();
        this.emailVerificado = in.readBoolean();
    }

}
