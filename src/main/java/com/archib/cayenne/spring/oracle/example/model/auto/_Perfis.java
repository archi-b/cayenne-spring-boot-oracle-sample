package com.archib.cayenne.spring.oracle.example.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Perfis was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Perfis extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CHAVE_PERFIL_PK_COLUMN = "CHAVE_PERFIL";

    public static final Property<Timestamp> DATA_CRIACAO = Property.create("dataCriacao", Timestamp.class);
    public static final Property<Timestamp> DATA_DESATIVACAO = Property.create("dataDesativacao", Timestamp.class);
    public static final Property<Timestamp> DATA_MODIFICACAO = Property.create("dataModificacao", Timestamp.class);
    public static final Property<String> DESCRICAO = Property.create("descricao", String.class);
    public static final Property<String> LOGIN_MODIFICACAO = Property.create("loginModificacao", String.class);

    protected Timestamp dataCriacao;
    protected Timestamp dataDesativacao;
    protected Timestamp dataModificacao;
    protected String descricao;
    protected String loginModificacao;


    public void setDataCriacao(Timestamp dataCriacao) {
        beforePropertyWrite("dataCriacao", this.dataCriacao, dataCriacao);
        this.dataCriacao = dataCriacao;
    }

    public Timestamp getDataCriacao() {
        beforePropertyRead("dataCriacao");
        return this.dataCriacao;
    }

    public void setDataDesativacao(Timestamp dataDesativacao) {
        beforePropertyWrite("dataDesativacao", this.dataDesativacao, dataDesativacao);
        this.dataDesativacao = dataDesativacao;
    }

    public Timestamp getDataDesativacao() {
        beforePropertyRead("dataDesativacao");
        return this.dataDesativacao;
    }

    public void setDataModificacao(Timestamp dataModificacao) {
        beforePropertyWrite("dataModificacao", this.dataModificacao, dataModificacao);
        this.dataModificacao = dataModificacao;
    }

    public Timestamp getDataModificacao() {
        beforePropertyRead("dataModificacao");
        return this.dataModificacao;
    }

    public void setDescricao(String descricao) {
        beforePropertyWrite("descricao", this.descricao, descricao);
        this.descricao = descricao;
    }

    public String getDescricao() {
        beforePropertyRead("descricao");
        return this.descricao;
    }

    public void setLoginModificacao(String loginModificacao) {
        beforePropertyWrite("loginModificacao", this.loginModificacao, loginModificacao);
        this.loginModificacao = loginModificacao;
    }

    public String getLoginModificacao() {
        beforePropertyRead("loginModificacao");
        return this.loginModificacao;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dataCriacao":
                return this.dataCriacao;
            case "dataDesativacao":
                return this.dataDesativacao;
            case "dataModificacao":
                return this.dataModificacao;
            case "descricao":
                return this.descricao;
            case "loginModificacao":
                return this.loginModificacao;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dataCriacao":
                this.dataCriacao = (Timestamp)val;
                break;
            case "dataDesativacao":
                this.dataDesativacao = (Timestamp)val;
                break;
            case "dataModificacao":
                this.dataModificacao = (Timestamp)val;
                break;
            case "descricao":
                this.descricao = (String)val;
                break;
            case "loginModificacao":
                this.loginModificacao = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dataCriacao);
        out.writeObject(this.dataDesativacao);
        out.writeObject(this.dataModificacao);
        out.writeObject(this.descricao);
        out.writeObject(this.loginModificacao);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dataCriacao = (Timestamp)in.readObject();
        this.dataDesativacao = (Timestamp)in.readObject();
        this.dataModificacao = (Timestamp)in.readObject();
        this.descricao = (String)in.readObject();
        this.loginModificacao = (String)in.readObject();
    }

}
